Database Migration Prompt
Task Overview
I need to migrate my real estate property management application from using in-memory storage to a PostgreSQL database while also moving all images to object storage. The migration should be seamless and ensure all data is properly transferred without loss.
Current System Architecture
The application currently uses an in-memory storage implementation (MemStorage class)
Images are stored as URLs (mostly external HTTP URLs)
The system manages properties, locations, neighborhoods, inquiries, property units, and various image types
Target Architecture
All data should be stored in PostgreSQL database using the existing schema
All images should be stored in object storage (Replit Object Storage)
The application should use the PgStorage implementation instead of MemStorage
Image URLs should be replaced with object storage keys
Migration Requirements
Create a migration script that:
Extracts all data from in-memory storage
Downloads images from external URLs
Uploads images to object storage
Stores object storage keys in the database
Preserves all relationships between entities
Update the application to:
Use PostgreSQL storage by default
Serve images from object storage
Handle image URLs properly in the client
Ensure data integrity:
All IDs should be preserved
All relationships should be maintained
No data should be lost during migration
Existing Files and Components
server/storage.ts - Current in-memory storage implementation
server/pg-storage.ts - PostgreSQL storage implementation
server/object-storage.ts - Object storage implementation
shared/schema.ts - Database schema definitions
server/db.ts - Database connection setup
Migration Steps
Please implement the following:
Create a migration script (server/migration.ts) that:
Migrates all entity types (locations, properties, neighborhoods, etc.)
Downloads images from external URLs and uploads to object storage
Updates image references to use object storage keys
Handles errors gracefully and provides detailed logging
Update the server (server/index.ts) to:
Use PostgreSQL storage by default
Add an API endpoint to serve images from object storage
Ensure all routes use the PostgreSQL implementation
Create client utilities (client/src/lib/image-utils.ts) to:
Convert object storage keys to proper URLs
Handle both legacy URLs and new object storage keys
Create a migration runner script (server/run-migration.ts) to:
Execute the migration process
Provide status updates and error handling
Create documentation (MIGRATION.md) with:
Prerequisites for running the migration
Step-by-step instructions
Troubleshooting tips
Rollback procedures
Technical Considerations
Use TypeScript throughout
Handle errors gracefully with proper logging
Ensure the migration is idempotent (can be run multiple times safely)
Preserve all IDs and relationships
Provide progress updates during migration
Include validation steps to verify data integrity
Dependencies
PostgreSQL database (using Drizzle ORM)
Replit Object Storage for image storage
Axios for downloading external images
Deliverables
Complete migration script
Updated server implementation
Client-side image utilities
Migration runner script
Comprehensive documentation
Please implement this migration ensuring all data is properly transferred and the application continues to function correctly with the new storage backend.